#include "../WS.hpp"
#include <Geode/cocos/actions/CCAction.h>
#include <Geode/cocos/support/data_support/uthash.h>

void fireAnimEvent(std::string eventName, matjson::Value const &content) {
  fireEvent("Animation."+eventName, content);
}

bool animationDomainDisabled = true;
$domainMethod(disableAnimation) {
  animationDomainDisabled = true;
  return geode::Ok(matjson::Object{});
}
$domainMethod(enableAnimation) {
  animationDomainDisabled = true;
  return geode::Ok(matjson::Object{});
}


/// please add fields support for CCObject
struct ActionMetadata {
  cocos2d::CCAction* action;
  int id;
  bool paused;
};
std::map<std::unique_ptr<cocos2d::CCAction>, ActionMetadata> meta;
int lastId = 0;
static std::map<cocos2d::CCObject*, std::vector<std::unique_ptr<cocos2d::CCAction>>> actions;

struct Animation {
  int id;
  std::string type;
  bool pausedState;

  Animation(ActionMetadata& a) {
    if (auto intervalAct = geode::cast::typeinfo_cast<cocos2d::CCActionInterval*>(a.action)) {
      type = "CocosIntervalAction";
      pausedState = a.paused;
    }
  }
};

template<>
struct matjson::Serialize<Animation>{
  static matjson::Value to_json(const Animation& a) {
    return matjson::Object{
      {"id", a.id},
      {"type", a.type},
      {"pausedState", a.pausedState}
    };
  }
};

#include <Geode/modify/CCActionManager.hpp>
struct ActmanExposed : geode::Modify<ActmanExposed,cocos2d::CCActionManager> {
  void pauseTarget(cocos2d::CCObject* pTarget) {
    cocos2d::CCActionManager::pauseTarget(pTarget);
    // 2 searxhes
    if (actions.contains(pTarget)) {
      for (auto& a : actions[pTarget]) {
        fireAnimEvent("animationUpdated", matjson::Object{
          {"animation", Animation(meta[a])}
        });
      }
    }
  }
};

#include <Geode/modify/CCAction.hpp>
class $modify(cocos2d::CCAction) {
  void constructor() {
    cocos2d::CCAction(); // ?
    int id = ++lastId;
    std::unique_ptr<cocos2d::CCAction> e {static_cast<cocos2d::CCAction*>(this)};
    meta[e] = {
      .action = this,
      .id = id,
      .paused = false
    };
    if (!animationDomainDisabled) {
      fireAnimEvent("animationCreated", matjson::Object{{"id", id}});
    }
  }
  void startWithTarget(cocos2d::CCNode* target) {
    cocos2d::CCAction::startWithTarget(target);
    if (!animationDomainDisabled) {
    std::unique_ptr<cocos2d::CCAction> e {static_cast<cocos2d::CCAction*>(this)};
      fireAnimEvent("animationStarted", matjson::Object{
        {"animation", Animation(meta[e])}
      });
    }
  }
};

$execute {
  auto p = Protocol::get();
  p->registerFunction("Animation.disable",&disableAnimation);
  p->registerFunction("Animation.enable",&enableAnimation);
}
