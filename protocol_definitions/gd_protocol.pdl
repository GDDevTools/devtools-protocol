# Copyright 2025 The GD DevTools Protocol Authors
# Use of this source code is governed by a BSD-style license that cannot be
# found in the LICENSE file.
# 
# Contributing to GD DevTools Protocol:
# idk


version
  major 2
  minor 2

# This domain exposes DOM read/write operations. Each DOM Node is represented with its mirror object
# that has an `id`. This `id` can be used to get additional information on the Node, and more. 
# It is important that client receives DOM events only for the nodes that are known to the client.
# Backend keeps track of the nodes that were sent to the client and never sends the same node twice. 
# It is client's responsibility to collect information about the nodes that were sent to the client.
domain DOM

  # Fired when [Node](type:DOM.Node)'s attribute is modified.
  event attributeModified
    parameters
      # ID of the node that has changed.
      NodeId nodeId
      # Attribute name
      string name
      # Attribute value
      string value
      
  # Fired when [Node](type:DOM.Node)'s attribute is removed.
  event attributeRemoved
    parameters
      # ID of the node that has changed.
      NodeId nodeId
      # Attribute name
      string name

  # Fired when Node's children count has changed.
  # Called in conjunction with other child-related events.
  event childNodeCountUpdated
    parameters
      NodeId nodeId
      integer childNodeCount
  
  # Fired when Node added a child.
  event childNodeInserted
    parameters
      NodeId parentNodeId
      NodeId previousNodeId
      Node node

  # Fired when Node removed a child.
  event childNodeRemoved
    parameters
      NodeId parentNodeId
      NodeId nodeId
      
  # Fired when the Scene has been replaced.
  event documentUpdated

  # the
  type NodeId extends integer

  # Box model.
  type BoxModel extends object
    properties
      # Node width
      integer width
      # Node height
      integer height

  # DOM interaction is implemented in terms of mirror objects that represent the actual DOM nodes.
  # DOMNode is a base node mirror type.
  type Node extends object
    properties
      # Node identifier that is passed into the rest of the DOM messages as the `nodeId`. Backend
      # will only push node with given `id` once. It is aware of all requested nodes and will only
      # fire DOM events for nodes known to the client.
      NodeId nodeId
      # The id of the parent node if any.
      optional NodeId parentId
      # `Node`'s nodeType.
      # Mods can override this property by setting the `puppeteer/nodeTypeOverride` user object to a CCString of a valid node type.
      integer nodeType
      # Child count for this node.
      optional integer childNodeCount
      # Child nodes of this node when requested with children.
      optional array of Node children
      # Attributes of the node. (unavailable for now)
      optional object attributes
      
  # Try sending a click to the node without actually clicking. 
  # Only works for `button` nodes.
  # 
  # First it tries to cast the node to `CCMenuItem` and clicks it. 
  # If it isn't a `CCMenuItem` then it will send a `DispatchEvent("puppeteer/nodeClicked")` event 
  # to the game so nodes implmenting that can handle as it needs.
  # 
  # If you want real click events then you can use [Input.dispatchMouseEvent](method:Input.dispatchMouseEvent) instead.
  command click
    parameters
      # The node id. Must be a button node
      NodeId nodeId

  # Describes node given its id, does not require domain to be enabled. Does not start tracking any
  # objects, can be used for automation.
  command describeNode
    parameters
      # Identifier of the node.
      NodeId nodeId
      # The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the
      # entire subtree or provide an integer larger than 0.
      optional integer depth
    returns
      # Node description.
      Node node
  
  # Disables DOM agent.
  command disable

  # Enables DOM agent.
  command enable

  # Get a node's attribute.
  command getAttribute
    parameters
      # The target node's ID
      NodeId nodeId
      # The attribute's name
      string name
    returns 
      # The attribute's value
      any value

  # Returns attributes for the specified node.
  command getAttributes
    parameters
      # The target node's ID
      NodeId nodeId
    returns 
      # The node's attributes
      object attributes
  
  command getBoxModel
    parameters
      # The target node's ID
      NodeId nodeId
    returns
      BoxModel model
  # Returns the root DOM node (the scene) (and optionally the subtree) to the caller. 
  # Implicitly enables the DOM domain events for the current target.
  command getDocument
    parameters
      # The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the entire subtree or provide an integer larger than 0.
      optional integer depth
    returns
      Node root

  # Returns node id at given location. Depending on whether DOM domain is enabled, nodeId is either returned or not.
  command getNodeForLocation
    parameters
      # X coordinate.
      integer x
      # Y coordinate.
      integer y
    returns
      NodeId nodeId

  # Moves node into the new parent, places it before the given anchor.
  command moveTo
    parameters
      # Id of the node to move.
      NodeId nodeId
      # Id of the element to drop the moved node into.
      NodeId targetNodeId
      # Drop node before this one (if absent, the moved node becomes the last child of `targetNodeId`)

  # Executes querySelector on a given node.
  command querySelector
    parameters
      # Id of the node to query upon.
      NodeId nodeId
      # Selector string
      string selector
    returns
      NodeId result
  
  # Removes attribute with given name from an element with given id.
  command removeAttribute
    parameters
      NodeId nodeId
      string name
  
  # Removes node with given id.
  command removeNode
    parameters
      # Id of the node to remove.
      NodeId nodeId
  
  # Sets attribute for an element with given id.
  command setAttribute
    parameters
      NodeId nodeId
      string name
      string value


# Get events whenever a log is pushed.
domain Log
  command disable
  command enable

  # Issued when a new message was logged.
  event entryAdded
    parameters
      LogEntry entry

# Manages the levels list.
domain Level
  # Disables the Level agent.
  command disable
  # Enables the Level agent.
  command enable

  # Get a local list.
  command getList
    parameters
      # The list ID.
      integer id
      # The level type.
      LevelType type
      # Bundle the levels with the response. Defaults to false.
      optional boolean includeLevels
    returns
      LevelList list

  # Get a locally saved level, either created level or saved level.
  command getLevel
    parameters
      # The level ID.
      integer id
      # The level type.
      LevelType type
    returns
      Level level

  # Get some online level.
  # To get levels from a list, use [getList](method:Level.getList) instead
  command getLevels
    parameters
      # The page to retrieve the list from. Leave empty to fetch all of them
      optional integer page
    returns
      array of Level levels

  # Delete a level. Asks the user before doing so and returns an error if the user rejects the request.
  command deleteLevel
    parameters
      # The level ID.
      integer id
      # The level type.
      LevelType type

  # Create a new local level.
  command createLevel
    parameters
      # The level name.
      string name
      # The level description.
      optional string description

  # Update a local level info.
  # All fields in the info is optional, and some fields will be ignored.
  command updateLevel
    parameters
      # The level ID.
      integer id
      # The updated level info. Unspecified fields will be left unchanged.
      Level info
    returns
      Level 

  # Fired when a new list was created
  event listCreated
    parameters
      LevelList list

  # Fired when a list was deleted
  event listDeleted
    parameters
      LevelList list

  # Fired when a new level was created
  event levelCreated
    parameters
      Level level

  # Fired when a level was deleted
  event levelDeleted
    parameters
      Level level

  # yo list
  type LevelList extends object
    properties
      # The list type. This indicate which getList function to use.
      enum type
        local
        online
      # The list ID.
      integer id
      # Downloads count
      optional integer downloads
      # The creator of the list.
      string author
      string name
      # list of levels, empty if includeLevels is false
      array of Level levels

  type LevelType extends string
    enum
      local
      online

  # yo level
  type Level extends object
    properties
      # The level type.
      LevelType type        
      # The level ID.
      integer id
      # Downloads count
      optional integer downloads
      # The creator of the level.
      string author
      string name

# Manages a mod.
domain Mod
  # Disables a specific mod.  
  # It won't actually be disabled until you [restart](domain:Game) the game.
  command disableMod
    parameters
      # The mod ID
      string mod

  # Enables a specific mod.  
  # It won't actually be enabled until you [restart](domain:Game) the game.
  command enableMod
    parameters
      # The mod ID
      string mod

  # Get non-custom(?) settings values
  command getSettingsItems
    parameters
      # The mod ID
      string mod
      # Limits return values to these keys
      optional array of string keys
    returns
      object data

  # Set non-custom(?) settings values
  command setSettings
    parameters
      # The mod ID
      string mod
      # Settings
      object data

# held the player's game session hostage
domain Game

  # Close game gracefully.
  command close

  # Close game gracelessly. (raises an std::runtime_error)
  command crash

  # Restart game gracefully.
  command restart

  # Returns version information.  
  command getVersion
    returns
      # This mod's version in the style of `[major, minor, patch]`
      array of integer protocolVersion
    
      # Geode version in the style of `[major, minor, patch]`
      array of integer loaderVersion
    
      # Geometry Dash version.
      string gameVersion
  
  # Get position and size of the game window.
  command getWindowBounds
    returns
      Bounds bounds
  # Set position and/or size of the game window.
  command getWindowBounds
    parameters
      Bounds bounds
  
  # Game window bounds information
  type Bounds extends object
    properties
      integer left
      integer top
      integer width
      integer height
      enum windowState
        normal
        minimized
        maximized
        fullscreen

# User inputs.
domain Input
  # Dispatches a mouse event to the game.
  command dispatchMouseEvent
    parameters
      # Time at which the event occured.
      integer timestamp
      # Mouse event type.
      enum type
        mouseWheel
        mousePress
        mouseRelease
      # Mouse X position
      number x
      # Mouse Y position
      number y
      # Mouse horizontal scroll delta
      number deltaX
      # Mouse vertical scroll delta
      number deltaY
      # Mouse button
      enum button
        left
        middle
        right
        back
        forward
        6
        7
        8
  # Dispatches a key event to the game.
  command dispatchKeyEvent
    parameters
      # Time at which the event occured.
      integer timestamp
      enum type
        keyDown
        keyUp
        char
      integer modifiers
      string code

  command setIgnoreInputEvents
    parameters
      boolean ignore

# Network domain allows tracking network activities of the page. It exposes information about http, file, data and other requests and responses, their headers, bodies, timing, etc.
domain Network
  # Disables Network agent.
  command disable

  # Enables Network agent.
  command enable

  command getRequestPostData
    parameters
      integer requestId
    returns
      # Request body string
      string postData

# javascriptin
domain Runtime
  # Evaluate the given JavaScript expression.
  command evaluate
    parameters
      string expression
    returns
      object idk
