# Copyright 2025 The Geode Devtools Protocol Authors
# Use of this source code is governed by a BSD-style license that cannot be
# found in the LICENSE file.
# 
# Contributing to GD DevTools Protocol:


version
  major 2
  minor 2

# This domain exposes DOM read/write operations. Each DOM Node is represented with its mirror object
# that has an `id`. This `id` can be used to get additional information on the Node, and more. 
# It is important that client receives DOM events only for the nodes that are known to the client.
# Backend keeps track of the nodes that were sent to the client and never sends the same node twice. 
# It is client's responsibility to collect information about the nodes that were sent to the client.
domain DOM
  # Box model.
  type BoxModel extends object
    properties
      # Node width
      integer width
      # Node height
      integer height
  # DOM interaction is implemented in terms of mirror objects that represent the actual DOM nodes.
  # DOMNode is a base node mirror type.
  type Node extends object
    properties
      # Node identifier that is passed into the rest of the DOM messages as the `nodeId`. Backend
      # will only push node with given `id` once. It is aware of all requested nodes and will only
      # fire DOM events for nodes known to the client.
      NodeId nodeId
      # The id of the parent node if any.
      optional NodeId parentId
      # `Node`'s nodeType.
      integer nodeType
      # Child count for this node.
      optional integer childNodeCount
      # Child nodes of this node when requested with children.
      optional array of Node children
      # Attributes of the node. (unavailable for now)
      optional object attributes
      
  # Try sending a click to the node without actually clicking. 
  # Only works for `button` nodes.
  # 
  # First it tries to cast the node to `CCMenuItem` and clicks it. 
  # If it isn't a `CCMenuItem` then it will send a `DispatchEvent(\"puppeteer/nodeClicked\")` event 
  # to the game so nodes implmenting that can handle as it needs.
  # 
  # If you want real click events then you can use [Input.`dispatchMouseEvent`](#inputdispatchmouseevent) instead.
  command click
    parameters
      # The node id. Must be a button node
      NodeID nodeId

  # Describes node given its id, does not require domain to be enabled. Does not start tracking any
  # objects, can be used for automation.
  command describeNode
    parameters
      # Identifier of the node.
      NodeId nodeId
      # The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the
      # entire subtree or provide an integer larger than 0.
      optional integer depth
    returns
      # Node description.
      Node node
  
  # Disables DOM agent.
  command disable

  # Enables DOM agent.
  command enable

# Get events whenever a log is pushed.
domain Log
  command disable
  command enable

  # Issued when a new message was logged.
  event entryAdded
    parameters
      LogEntry entry

# Manages the levels list.
domain Levels
  # Disables the Levels agent.
  command disable
  # Enables the Levels agent.
  command enable

  # Get a local list.
  command getLocalList
    parameters
      # The list ID, can be seen in the game using Editor List ID API (installed as required).
      integer id
      # Bundle the levels with the response. Defaults to false.
      optional bool includeLevels
    returns
      LevelList list

  # Get a saved online list.
  command getSavedList
    parameters
      # The list ID.
      integer id
      # Bundle the levels with the response. Defaults to false.
      optional bool includeLevels
    returns
      LevelList list

  # Get a local level.
  command getLocalLevel
    parameters
      # The level ID, can be seen in the game using Editor Level ID API (installed as required)
      integer id
    returns
      Level level

  # Get a saved online level.
  command getSavedLevel
    parameters
      # The level ID.
      integer id
    returns
      Level level

  # Get some online level.
  command getSavedLevels
    parameters
      # The page to retrieve the list from. Leave empty to fetch all of them
      optional integer page
    returns
      array of Level


  # Fired when a new list was created
  event listCreated
    parameters
      LevelList list

  # Fired when a list was deleted
  event listDeleted
    parameters
      LevelList list

  # Fired when a new level was created
  event levelCreated
    parameters
      Level level

  # Fired when a level was deleted
  event levelDeleted
    parameters
      Level level

  # yo list
  type LevelList extends object
    properties
      # The list type. This indicate which getList function to use.
      enum type
        local
        online
      # The list ID.
      integer id
      # Downloads count
      optional integer downloads
      # The creator of the list.
      string author
      string name
      # list of levels, empty if includeLevels is false
      array of Level levels

  # yo level
  type Level extends object
    properties
      # The level type. This indicate which getLevel function to use.
      enum type
        local
        online
      # The level ID.
      integer id
      # Downloads count
      optional integer downloads
      # The creator of the level.
      string author
      string name

# Manages a mod.
domain Mods
  # Disables a specific mod.  
  # It won't actually be disabled until you [restart](#game-domain) the game.
  command disableMod
    parameters
      # The mod ID
      string mod

  # Enables a specific mod.  
  # It won't actually be enabled until you [restart](#game-domain) the game.
  command enableMod
    parameters
      # The mod ID
      string mod

  # Get non-custom(?) settings values
  command getSettingsItems
    parameters
      # The mod ID
      string mod
      # Limits return values to these keys
      optional array of string keys
    returns
      object data

  # Set non-custom(?) settings values
  command setSettings
    parameters
      # The mod ID
      string mod
      # Settings
      object data

# held the player's game session hostage
domain Game

  # Close game gracefully.
  command close

  # Close game gracelessly. (raises an std::runtime_error)
  command crash

  # Restart game gracefully.
  command restart

  # Returns version information.  
  command getVersion
    returns
      # This mod's version in the style of `[major, minor, patch]`
      array of integer protocolVersion
    
      # Geode version in the style of `[major, minor, patch]`
      array of integer loaderVersion
    
      # Geometry Dash version.
      string gameVersion
