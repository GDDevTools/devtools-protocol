{
  "version": {
    "major": "2",
    "minor": "2"
  },
  "domains": [
    {
      "domain": "DOM",
      "description": "This domain exposes DOM read/write operations. Each DOM Node is represented with its mirror object\nthat has an `id`. This `id` can be used to get additional information on the Node, and more.\nIt is important that client receives DOM events only for the nodes that are known to the client.\nBackend keeps track of the nodes that were sent to the client and never sends the same node twice.\nIt is client's responsibility to collect information about the nodes that were sent to the client.",
      "types": [
        {
          "id": "BoxModel",
          "description": "Box model.",
          "type": "object",
          "properties": [
            {
              "name": "width",
              "description": "Node width",
              "type": "integer"
            },
            {
              "name": "height",
              "description": "Node height",
              "type": "integer"
            }
          ]
        },
        {
          "id": "Node",
          "description": "DOM interaction is implemented in terms of mirror objects that represent the actual DOM nodes.\nDOMNode is a base node mirror type.",
          "type": "object",
          "properties": [
            {
              "name": "nodeId",
              "description": "Node identifier that is passed into the rest of the DOM messages as the `nodeId`. Backend\nwill only push node with given `id` once. It is aware of all requested nodes and will only\nfire DOM events for nodes known to the client.",
              "$ref": "NodeId"
            },
            {
              "name": "parentId",
              "description": "The id of the parent node if any.",
              "optional": true,
              "$ref": "NodeId"
            },
            {
              "name": "nodeType",
              "description": "`Node`'s nodeType.",
              "type": "integer"
            },
            {
              "name": "childNodeCount",
              "description": "Child count for this node.",
              "optional": true,
              "type": "integer"
            },
            {
              "name": "children",
              "description": "Child nodes of this node when requested with children.",
              "optional": true,
              "type": "array",
              "items": {
                "$ref": "Node"
              }
            },
            {
              "name": "attributes",
              "description": "Attributes of the node. (unavailable for now)",
              "optional": true,
              "type": "object"
            }
          ]
        }
      ],
      "commands": [
        {
          "name": "click",
          "description": "Try sending a click to the node without actually clicking.\nOnly works for `button` nodes.\n\nFirst it tries to cast the node to `CCMenuItem` and clicks it.\nIf it isn't a `CCMenuItem` then it will send a `DispatchEvent(\\\"puppeteer/nodeClicked\\\")` event\nto the game so nodes implmenting that can handle as it needs.\n\nIf you want real click events then you can use [Input.`dispatchMouseEvent`](#inputdispatchmouseevent) instead.",
          "parameters": [
            {
              "name": "nodeId",
              "description": "The node id. Must be a button node",
              "$ref": "NodeID"
            }
          ]
        },
        {
          "name": "describeNode",
          "description": "Describes node given its id, does not require domain to be enabled. Does not start tracking any\nobjects, can be used for automation.",
          "parameters": [
            {
              "name": "nodeId",
              "description": "Identifier of the node.",
              "$ref": "NodeId"
            },
            {
              "name": "depth",
              "description": "The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the\nentire subtree or provide an integer larger than 0.",
              "optional": true,
              "type": "integer"
            }
          ],
          "returns": [
            {
              "name": "node",
              "description": "Node description.",
              "$ref": "Node"
            }
          ]
        },
        {
          "name": "disable",
          "description": "Disables DOM agent."
        },
        {
          "name": "enable",
          "description": "Enables DOM agent."
        }
      ]
    },
    {
      "domain": "Log",
      "description": "Get events whenever a log is pushed.",
      "commands": [
        {
          "name": "disable"
        },
        {
          "name": "enable"
        }
      ],
      "events": [
        {
          "name": "entryAdded",
          "description": "Issued when a new message was logged.",
          "parameters": [
            {
              "name": "entry",
              "$ref": "LogEntry"
            }
          ]
        }
      ]
    },
    {
      "domain": "Levels",
      "description": "Manages the levels list.",
      "commands": [
        {
          "name": "disable",
          "description": "Disables the Levels agent."
        },
        {
          "name": "enable",
          "description": "Enables the Levels agent."
        },
        {
          "name": "getLocalLevel",
          "parameters": [
            {
              "name": "id",
              "description": "The level ID, can be seen in the game using Editor Level ID API (installed as required)",
              "type": "integer"
            }
          ],
          "returns": [
            {
              "name": "level",
              "$ref": "Level"
            }
          ]
        },
        {
          "name": "getOnlineLevel",
          "parameters": [
            {
              "name": "id",
              "description": "The level ID.",
              "type": "integer"
            }
          ],
          "returns": [
            {
              "name": "level",
              "$ref": "Level"
            }
          ]
        }
      ],
      "events": [
        {
          "name": "levelCreated",
          "parameters": [
            {
              "name": "id",
              "type": "integer"
            }
          ]
        },
        {
          "name": "levelDeleted",
          "parameters": [
            {
              "name": "level",
              "$ref": "Level"
            }
          ]
        }
      ],
      "types": [
        {
          "id": "Level",
          "description": "yo level",
          "type": "object",
          "properties": [
            {
              "name": "type",
              "description": "The level type. This indicate which getLevel function to use.",
              "type": "string",
              "enum": [
                "main",
                "local",
                "online"
              ]
            },
            {
              "name": "id",
              "description": "The level ID.",
              "type": "integer"
            },
            {
              "name": "downloads",
              "description": "Downloads count",
              "type": "integer"
            },
            {
              "name": "author",
              "description": "The creator of the level.",
              "type": "string"
            },
            {
              "name": "name",
              "type": "string"
            }
          ]
        }
      ]
    },
    {
      "domain": "Mods",
      "description": "Manages a mod.",
      "commands": [
        {
          "name": "disableMod",
          "description": "Disables a specific mod.\nIt won't actually be disabled until you [restart](#game-domain) the game.",
          "parameters": [
            {
              "name": "mod",
              "description": "The mod ID",
              "type": "string"
            }
          ]
        },
        {
          "name": "enableMod",
          "description": "Enables a specific mod.\nIt won't actually be enabled until you [restart](#game-domain) the game.",
          "parameters": [
            {
              "name": "mod",
              "description": "The mod ID",
              "type": "string"
            }
          ]
        },
        {
          "name": "getSettingsItems",
          "description": "Get non-custom(?) settings values",
          "parameters": [
            {
              "name": "mod",
              "description": "The mod ID",
              "type": "string"
            },
            {
              "name": "keys",
              "description": "Limits return values to these keys",
              "optional": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ],
          "returns": [
            {
              "name": "data",
              "type": "object"
            }
          ]
        },
        {
          "name": "setSettings",
          "description": "Set non-custom(?) settings values",
          "parameters": [
            {
              "name": "mod",
              "description": "The mod ID",
              "type": "string"
            },
            {
              "name": "data",
              "description": "Settings",
              "type": "object"
            }
          ]
        }
      ]
    },
    {
      "domain": "Game",
      "description": "held the player's game session hostage",
      "commands": [
        {
          "name": "close",
          "description": "Close game gracefully."
        },
        {
          "name": "crash",
          "description": "Close game gracelessly. (raises an std::runtime_error)"
        },
        {
          "name": "restart",
          "description": "Restart game gracefully."
        },
        {
          "name": "getVersion",
          "description": "Returns version information.",
          "returns": [
            {
              "name": "protocolVersion",
              "description": "This mod's version in the style of `[major, minor, patch]`",
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            {
              "name": "loaderVersion",
              "description": "Geode version in the style of `[major, minor, patch]`",
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            {
              "name": "gameVersion",
              "description": "Geometry Dash version.",
              "type": "string"
            }
          ]
        }
      ]
    }
  ]
}
