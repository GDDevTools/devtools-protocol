{
  "version": {
    "major": "2",
    "minor": "2"
  },
  "domains": [
    {
      "domain": "DOM",
      "description": "This domain exposes DOM read/write operations. Each DOM Node is represented with its mirror object\nthat has an `id`. This `id` can be used to get additional information on the Node, and more.\nIt is important that client receives DOM events only for the nodes that are known to the client.\nBackend keeps track of the nodes that were sent to the client and never sends the same node twice.\nIt is client's responsibility to collect information about the nodes that were sent to the client.",
      "events": [
        {
          "name": "attributeModified",
          "description": "Fired when [Node](type:DOM.Node)'s attribute is modified.",
          "parameters": [
            {
              "name": "nodeId",
              "description": "ID of the node that has changed.",
              "$ref": "NodeId"
            },
            {
              "name": "name",
              "description": "Attribute name",
              "type": "string"
            },
            {
              "name": "value",
              "description": "Attribute value",
              "type": "string"
            }
          ]
        },
        {
          "name": "attributeRemoved",
          "description": "Fired when [Node](type:DOM.Node)'s attribute is removed.",
          "parameters": [
            {
              "name": "nodeId",
              "description": "ID of the node that has changed.",
              "$ref": "NodeId"
            },
            {
              "name": "name",
              "description": "Attribute name",
              "type": "string"
            }
          ]
        },
        {
          "name": "childNodeCountUpdated",
          "description": "Fired when Node's children count has changed.\nCalled in conjunction with other child-related events.",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId"
            },
            {
              "name": "childNodeCount",
              "type": "integer"
            }
          ]
        },
        {
          "name": "childNodeInserted",
          "description": "Fired when Node added a child.",
          "parameters": [
            {
              "name": "parentNodeId",
              "$ref": "NodeId"
            },
            {
              "name": "previousNodeId",
              "$ref": "NodeId"
            },
            {
              "name": "node",
              "$ref": "Node"
            }
          ]
        },
        {
          "name": "childNodeRemoved",
          "description": "Fired when Node removed a child.",
          "parameters": [
            {
              "name": "parentNodeId",
              "$ref": "NodeId"
            },
            {
              "name": "nodeId",
              "$ref": "NodeId"
            }
          ]
        },
        {
          "name": "documentUpdated",
          "description": "Fired when the Scene has been replaced."
        }
      ],
      "types": [
        {
          "id": "NodeId",
          "description": "the",
          "type": "integer"
        },
        {
          "id": "BoxModel",
          "description": "Box model.",
          "type": "object",
          "properties": [
            {
              "name": "width",
              "description": "Node width",
              "type": "integer"
            },
            {
              "name": "height",
              "description": "Node height",
              "type": "integer"
            }
          ]
        },
        {
          "id": "Node",
          "description": "DOM interaction is implemented in terms of mirror objects that represent the actual DOM nodes.\nDOMNode is a base node mirror type.",
          "type": "object",
          "properties": [
            {
              "name": "nodeId",
              "description": "Node identifier that is passed into the rest of the DOM messages as the `nodeId`. Backend\nwill only push node with given `id` once. It is aware of all requested nodes and will only\nfire DOM events for nodes known to the client.",
              "$ref": "NodeId"
            },
            {
              "name": "parentId",
              "description": "The id of the parent node if any.",
              "optional": true,
              "$ref": "NodeId"
            },
            {
              "name": "nodeType",
              "description": "`Node`'s nodeType.\nMods can override this property by setting the `puppeteer/nodeTypeOverride` user object to a CCString of a valid node type.",
              "type": "integer"
            },
            {
              "name": "childNodeCount",
              "description": "Child count for this node.",
              "optional": true,
              "type": "integer"
            },
            {
              "name": "children",
              "description": "Child nodes of this node when requested with children.",
              "optional": true,
              "type": "array",
              "items": {
                "$ref": "Node"
              }
            },
            {
              "name": "attributes",
              "description": "Attributes of the node. (unavailable for now)",
              "optional": true,
              "type": "object"
            }
          ]
        }
      ],
      "commands": [
        {
          "name": "click",
          "description": "Try sending a click to the node without actually clicking.\nOnly works for `button` nodes.\n\nFirst it tries to cast the node to `CCMenuItem` and clicks it.\nIf it isn't a `CCMenuItem` then it will send a `DispatchEvent(\"puppeteer/nodeClicked\")` event\nto the game so nodes implmenting that can handle as it needs.\n\nIf you want real click events then you can use [Input.dispatchMouseEvent](method:Input.dispatchMouseEvent) instead.",
          "parameters": [
            {
              "name": "nodeId",
              "description": "The node id. Must be a button node",
              "$ref": "NodeId"
            }
          ]
        },
        {
          "name": "describeNode",
          "description": "Describes node given its id, does not require domain to be enabled. Does not start tracking any\nobjects, can be used for automation.",
          "parameters": [
            {
              "name": "nodeId",
              "description": "Identifier of the node.",
              "$ref": "NodeId"
            },
            {
              "name": "depth",
              "description": "The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the\nentire subtree or provide an integer larger than 0.",
              "optional": true,
              "type": "integer"
            }
          ],
          "returns": [
            {
              "name": "node",
              "description": "Node description.",
              "$ref": "Node"
            }
          ]
        },
        {
          "name": "disable",
          "description": "Disables DOM agent."
        },
        {
          "name": "enable",
          "description": "Enables DOM agent."
        },
        {
          "name": "getAttribute",
          "description": "Get a node's attribute.",
          "parameters": [
            {
              "name": "nodeId",
              "description": "The target node's ID",
              "$ref": "NodeId"
            },
            {
              "name": "name",
              "description": "The attribute's name",
              "type": "string"
            }
          ],
          "returns": [
            {
              "name": "value",
              "description": "The attribute's value",
              "type": "any"
            }
          ]
        },
        {
          "name": "getAttributes",
          "description": "Returns attributes for the specified node.",
          "parameters": [
            {
              "name": "nodeId",
              "description": "The target node's ID",
              "$ref": "NodeId"
            }
          ],
          "returns": [
            {
              "name": "attributes",
              "description": "The node's attributes",
              "type": "object"
            }
          ]
        },
        {
          "name": "getBoxModel",
          "parameters": [
            {
              "name": "nodeId",
              "description": "The target node's ID",
              "$ref": "NodeId"
            }
          ],
          "returns": [
            {
              "name": "model",
              "$ref": "BoxModel"
            }
          ]
        },
        {
          "name": "getDocument",
          "description": "Returns the root DOM node (the scene) (and optionally the subtree) to the caller.\nImplicitly enables the DOM domain events for the current target.",
          "parameters": [
            {
              "name": "depth",
              "description": "The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the entire subtree or provide an integer larger than 0.",
              "optional": true,
              "type": "integer"
            }
          ],
          "returns": [
            {
              "name": "root",
              "$ref": "Node"
            }
          ]
        },
        {
          "name": "getNodeForLocation",
          "description": "Returns node id at given location. Depending on whether DOM domain is enabled, nodeId is either returned or not.",
          "parameters": [
            {
              "name": "x",
              "description": "X coordinate.",
              "type": "integer"
            },
            {
              "name": "y",
              "description": "Y coordinate.",
              "type": "integer"
            }
          ],
          "returns": [
            {
              "name": "nodeId",
              "$ref": "NodeId"
            }
          ]
        },
        {
          "name": "moveTo",
          "description": "Moves node into the new parent, places it before the given anchor.",
          "parameters": [
            {
              "name": "nodeId",
              "description": "Id of the node to move.",
              "$ref": "NodeId"
            },
            {
              "name": "targetNodeId",
              "description": "Id of the element to drop the moved node into.",
              "$ref": "NodeId"
            }
          ]
        },
        {
          "name": "querySelector",
          "description": "Executes querySelector on a given node.",
          "parameters": [
            {
              "name": "nodeId",
              "description": "Id of the node to query upon.",
              "$ref": "NodeId"
            },
            {
              "name": "selector",
              "description": "Selector string",
              "type": "string"
            }
          ],
          "returns": [
            {
              "name": "result",
              "$ref": "NodeId"
            }
          ]
        },
        {
          "name": "removeAttribute",
          "description": "Removes attribute with given name from an element with given id.",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId"
            },
            {
              "name": "name",
              "type": "string"
            }
          ]
        },
        {
          "name": "removeNode",
          "description": "Removes node with given id.",
          "parameters": [
            {
              "name": "nodeId",
              "description": "Id of the node to remove.",
              "$ref": "NodeId"
            }
          ]
        },
        {
          "name": "requestNode",
          "description": "Requests that the node is sent to the caller given the JavaScript node object reference.",
          "parameters": [
            {
              "name": "objectId",
              "description": "JavaScript object id to convert into node.",
              "type": "string"
            }
          ],
          "returns": [
            {
              "name": "nodeId",
              "description": "Node id for given object.",
              "$ref": "NodeId"
            }
          ]
        },
        {
          "name": "resolveNode",
          "description": "Resolves the JavaScript node object for a given NodeId.",
          "parameters": [
            {
              "name": "nodeId",
              "description": "Id of the node to resolve.",
              "$ref": "NodeId"
            }
          ],
          "returns": [
            {
              "name": "object",
              "description": "JavaScript object wrapper for given node.",
              "$ref": "Runtime.RemoteObject"
            }
          ]
        },
        {
          "name": "setAttribute",
          "description": "Sets attribute for an element with given id.",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId"
            },
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "value",
              "type": "string"
            }
          ]
        }
      ]
    },
    {
      "domain": "Log",
      "description": "Get events whenever a log is pushed.",
      "commands": [
        {
          "name": "disable"
        },
        {
          "name": "enable"
        }
      ],
      "events": [
        {
          "name": "entryAdded",
          "description": "Issued when a new message was logged.",
          "parameters": [
            {
              "name": "entry",
              "$ref": "LogEntry"
            }
          ]
        }
      ]
    },
    {
      "domain": "Level",
      "description": "Manages the levels list.",
      "commands": [
        {
          "name": "disable",
          "description": "Disables the Level agent."
        },
        {
          "name": "enable",
          "description": "Enables the Level agent."
        },
        {
          "name": "getList",
          "description": "Get a local list.",
          "parameters": [
            {
              "name": "id",
              "description": "The list ID.",
              "type": "integer"
            },
            {
              "name": "type",
              "description": "The level type.",
              "$ref": "LevelType"
            },
            {
              "name": "includeLevels",
              "description": "Bundle the levels with the response. Defaults to false.",
              "optional": true,
              "type": "boolean"
            }
          ],
          "returns": [
            {
              "name": "list",
              "$ref": "LevelList"
            }
          ]
        },
        {
          "name": "getLevel",
          "description": "Get a locally saved level, either created level or saved level.",
          "parameters": [
            {
              "name": "id",
              "description": "The level ID.",
              "type": "integer"
            },
            {
              "name": "type",
              "description": "The level type.",
              "$ref": "LevelType"
            }
          ],
          "returns": [
            {
              "name": "level",
              "$ref": "Level"
            }
          ]
        },
        {
          "name": "getLevels",
          "description": "Get some online level.\nTo get levels from a list, use [getList](method:Level.getList) instead",
          "parameters": [
            {
              "name": "page",
              "description": "The page to retrieve the list from. Leave empty to fetch all of them",
              "optional": true,
              "type": "integer"
            }
          ],
          "returns": [
            {
              "name": "levels",
              "type": "array",
              "items": {
                "$ref": "Level"
              }
            }
          ]
        },
        {
          "name": "deleteLevel",
          "description": "Delete a level. Asks the user before doing so and returns an error if the user rejects the request.",
          "parameters": [
            {
              "name": "id",
              "description": "The level ID.",
              "type": "integer"
            },
            {
              "name": "type",
              "description": "The level type.",
              "$ref": "LevelType"
            }
          ]
        },
        {
          "name": "createLevel",
          "description": "Create a new local level.",
          "parameters": [
            {
              "name": "name",
              "description": "The level name.",
              "type": "string"
            },
            {
              "name": "description",
              "description": "The level description.",
              "optional": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "updateLevel",
          "description": "Update a local level info.\nAll fields in the info is optional, and some fields will be ignored.",
          "parameters": [
            {
              "name": "id",
              "description": "The level ID.",
              "type": "integer"
            },
            {
              "name": "info",
              "description": "The updated level info. Unspecified fields will be left unchanged.",
              "$ref": "Level"
            }
          ],
          "returns": [
            {
              "name": "info",
              "description": "The exact same level info with updated information.",
              "$ref": "Level"
            }
          ]
        }
      ],
      "events": [
        {
          "name": "listCreated",
          "description": "Fired when a new list was created",
          "parameters": [
            {
              "name": "list",
              "$ref": "LevelList"
            }
          ]
        },
        {
          "name": "listDeleted",
          "description": "Fired when a list was deleted",
          "parameters": [
            {
              "name": "list",
              "$ref": "LevelList"
            }
          ]
        },
        {
          "name": "levelCreated",
          "description": "Fired when a new level was created",
          "parameters": [
            {
              "name": "level",
              "$ref": "Level"
            }
          ]
        },
        {
          "name": "levelDeleted",
          "description": "Fired when a level was deleted",
          "parameters": [
            {
              "name": "level",
              "$ref": "Level"
            }
          ]
        }
      ],
      "types": [
        {
          "id": "LevelList",
          "description": "yo list",
          "type": "object",
          "properties": [
            {
              "name": "type",
              "description": "The list type. This indicate which getList function to use.",
              "type": "string",
              "enum": [
                "local",
                "online"
              ]
            },
            {
              "name": "id",
              "description": "The list ID.",
              "type": "integer"
            },
            {
              "name": "downloads",
              "description": "Downloads count",
              "optional": true,
              "type": "integer"
            },
            {
              "name": "author",
              "description": "The creator of the list.",
              "type": "string"
            },
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "levels",
              "description": "list of levels, empty if includeLevels is false",
              "type": "array",
              "items": {
                "$ref": "Level"
              }
            }
          ]
        },
        {
          "id": "LevelType",
          "type": "string",
          "enum": [
            "local",
            "online"
          ]
        },
        {
          "id": "Level",
          "description": "yo level",
          "type": "object",
          "properties": [
            {
              "name": "type",
              "description": "The level type.",
              "$ref": "LevelType"
            },
            {
              "name": "id",
              "description": "The level ID.",
              "type": "integer"
            },
            {
              "name": "downloads",
              "description": "Downloads count",
              "optional": true,
              "type": "integer"
            },
            {
              "name": "author",
              "description": "The creator of the level.",
              "type": "string"
            },
            {
              "name": "name",
              "type": "string"
            }
          ]
        }
      ]
    },
    {
      "domain": "Mod",
      "description": "Manages a mod.",
      "commands": [
        {
          "name": "disableMod",
          "description": "Disables a specific mod.\nIt won't actually be disabled until you [restart](domain:Game) the game.",
          "parameters": [
            {
              "name": "mod",
              "description": "The mod ID",
              "type": "string"
            }
          ]
        },
        {
          "name": "enableMod",
          "description": "Enables a specific mod.\nIt won't actually be enabled until you [restart](domain:Game) the game.",
          "parameters": [
            {
              "name": "mod",
              "description": "The mod ID",
              "type": "string"
            }
          ]
        },
        {
          "name": "getSettingsItems",
          "description": "Get non-custom(?) settings values",
          "parameters": [
            {
              "name": "mod",
              "description": "The mod ID",
              "type": "string"
            },
            {
              "name": "keys",
              "description": "Limits return values to these keys",
              "optional": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ],
          "returns": [
            {
              "name": "data",
              "type": "object"
            }
          ]
        },
        {
          "name": "setSettings",
          "description": "Set non-custom(?) settings values",
          "parameters": [
            {
              "name": "mod",
              "description": "The mod ID",
              "type": "string"
            },
            {
              "name": "data",
              "description": "Settings",
              "type": "object"
            }
          ]
        }
      ]
    },
    {
      "domain": "Game",
      "description": "held the player's game session hostage",
      "commands": [
        {
          "name": "close",
          "description": "Close game gracefully."
        },
        {
          "name": "crash",
          "description": "Close game gracelessly. (raises an std::runtime_error)"
        },
        {
          "name": "restart",
          "description": "Restart game gracefully."
        },
        {
          "name": "getVersion",
          "description": "Returns version information.",
          "returns": [
            {
              "name": "protocolVersion",
              "description": "This mod's version in the style of `[major, minor, patch]`",
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            {
              "name": "loaderVersion",
              "description": "Geode version in the style of `[major, minor, patch]`",
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            {
              "name": "gameVersion",
              "description": "Geometry Dash version.",
              "type": "string"
            }
          ]
        },
        {
          "name": "getWindowBounds",
          "description": "Get position and size of the game window.",
          "returns": [
            {
              "name": "bounds",
              "$ref": "Bounds"
            }
          ]
        },
        {
          "name": "getWindowBounds",
          "description": "Set position and/or size of the game window.",
          "parameters": [
            {
              "name": "bounds",
              "$ref": "Bounds"
            }
          ]
        }
      ],
      "types": [
        {
          "id": "Bounds",
          "description": "Game window bounds information",
          "type": "object",
          "properties": [
            {
              "name": "left",
              "type": "integer"
            },
            {
              "name": "top",
              "type": "integer"
            },
            {
              "name": "width",
              "type": "integer"
            },
            {
              "name": "height",
              "type": "integer"
            },
            {
              "name": "windowState",
              "type": "string",
              "enum": [
                "normal",
                "minimized",
                "maximized",
                "fullscreen"
              ]
            }
          ]
        }
      ]
    },
    {
      "domain": "Input",
      "description": "User inputs.",
      "commands": [
        {
          "name": "disable",
          "description": "snooze"
        },
        {
          "name": "enable",
          "description": "idk what do you think"
        },
        {
          "name": "dispatchMouseEvent",
          "description": "Dispatches a mouse event to the game.",
          "parameters": [
            {
              "name": "timestamp",
              "description": "Time at which the event occured.",
              "type": "integer"
            },
            {
              "name": "type",
              "description": "Mouse event type.",
              "type": "string",
              "enum": [
                "mouseWheel",
                "mousePress",
                "mouseRelease"
              ]
            },
            {
              "name": "x",
              "description": "Mouse X position",
              "type": "number"
            },
            {
              "name": "y",
              "description": "Mouse Y position",
              "type": "number"
            },
            {
              "name": "deltaX",
              "description": "Mouse horizontal scroll delta",
              "type": "number"
            },
            {
              "name": "deltaY",
              "description": "Mouse vertical scroll delta",
              "type": "number"
            },
            {
              "name": "button",
              "description": "Mouse button",
              "type": "string",
              "enum": [
                "left",
                "middle",
                "right",
                "back",
                "forward",
                "6",
                "7",
                "8"
              ]
            }
          ]
        },
        {
          "name": "dispatchKeyEvent",
          "description": "Dispatches a key event to the game.",
          "parameters": [
            {
              "name": "timestamp",
              "description": "Time at which the event occured.",
              "type": "integer"
            },
            {
              "name": "type",
              "type": "string",
              "enum": [
                "keyDown",
                "keyUp",
                "char"
              ]
            },
            {
              "name": "modifiers",
              "type": "integer"
            },
            {
              "name": "code",
              "type": "string"
            }
          ]
        },
        {
          "name": "setIgnoreInputEvents",
          "parameters": [
            {
              "name": "ignore",
              "type": "boolean"
            }
          ]
        }
      ]
    },
    {
      "domain": "Network",
      "description": "Network domain allows tracking network activities of the page. It exposes information about http, file, data and other requests and responses, their headers, bodies, timing, etc.",
      "experimental": true,
      "commands": [
        {
          "name": "disable",
          "description": "Disables Network agent."
        },
        {
          "name": "enable",
          "description": "Enables Network agent."
        },
        {
          "name": "getRequestPostData",
          "parameters": [
            {
              "name": "requestId",
              "type": "integer"
            }
          ],
          "returns": [
            {
              "name": "postData",
              "description": "Request body string",
              "type": "string"
            }
          ]
        }
      ]
    },
    {
      "domain": "Runtime",
      "description": "javascriptin",
      "commands": [
        {
          "name": "evaluate",
          "description": "Evaluate the given JavaScript expression.",
          "parameters": [
            {
              "name": "expression",
              "type": "string"
            }
          ],
          "returns": [
            {
              "name": "idk",
              "type": "object"
            }
          ]
        }
      ],
      "types": [
        {
          "id": "ObjectType",
          "type": "string",
          "enum": [
            "object",
            "function",
            "undefined",
            "string",
            "number",
            "boolean",
            "symbol",
            "bigint"
          ]
        },
        {
          "id": "ObjectSubtype",
          "type": "string",
          "enum": [
            "array",
            "null",
            "node",
            "regexp",
            "iterator",
            "generator",
            "error"
          ]
        },
        {
          "id": "PropertyPreview",
          "description": "Even smaller.",
          "type": "object",
          "properties": [
            {
              "name": "type",
              "description": "Object type.",
              "$ref": "ObjectType"
            },
            {
              "name": "subtype",
              "description": "Object subtype hint. Specified for object type `values` only.",
              "optional": true,
              "$ref": "ObjectSubtype"
            },
            {
              "name": "value",
              "description": "User-friendly property value string.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "preview",
              "description": "Nested value preview.",
              "optional": true,
              "$ref": "ObjectPreview"
            }
          ]
        },
        {
          "id": "ObjectPreview",
          "description": "Object containing abbreviated remote object value.",
          "type": "object",
          "properties": [
            {
              "name": "type",
              "description": "Object type.",
              "$ref": "ObjectType"
            },
            {
              "name": "subtype",
              "description": "Object subtype hint. Specified for object type `values` only.",
              "optional": true,
              "$ref": "ObjectSubtype"
            },
            {
              "name": "description",
              "description": "String representation of the object.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "properties",
              "description": "List of the properties.",
              "type": "array",
              "items": {
                "$ref": "PropertyPreview"
              }
            }
          ]
        },
        {
          "id": "RemoteObject",
          "description": "Mirror object referencing original JavaScript object.",
          "type": "object",
          "properties": [
            {
              "name": "type",
              "description": "Object type.",
              "$ref": "ObjectType"
            },
            {
              "name": "subtype",
              "description": "Object subtype hint. Specified for object type `values` only.",
              "optional": true,
              "$ref": "ObjectSubype"
            },
            {
              "name": "value",
              "description": "Remote object value in case of primitive values or JSON values (if it was requested).",
              "optional": true,
              "type": "any"
            },
            {
              "name": "objectId",
              "description": "Unique object identifier (for non-primitive values).",
              "optional": true,
              "type": "string"
            },
            {
              "name": "preview",
              "description": "Preview containing abbreviated property values. Specified for object type values only.",
              "optional": true,
              "$ref": "ObjectPreview"
            }
          ]
        }
      ]
    }
  ]
}